1. Почему в большинстве ситуаций стоит использовать flexbox-позиционирование?
Flexbox предоставляет более удобный способ управления расположением и выравниванием элементов внутри контейнера.
Особенности Flexbox:
- Гибкость расположения элементов: с помощью свойств flexbox можно легко настроить расположение элементов в контейнере в зависимости от их размеров и количества.
- Вложенность: flexbox позволяет создавать вложенные контейнеры и управлять расположением элементов внутри каждого из них.
- Выравнивание элементов: flexbox позволяет легко выравнивать элементы по горизонтали и вертикали, а также распределять пространство между элементами.
- Работа с flex-контейнером и flex-элементами: свойства flexbox применяются к flex-контейнеру (родительскому элементу) и flex-элементам (дочерним элементам).
- Свойства flexbox: основные свойства flexbox включают display, flex-direction, justify-content, align-items, align-self, flex-wrap, flex-grow, flex-shrink и flex-basis.

2. Самостоятельно изучи способ позиционирования через `display: table`  и ответьте на вопрос, для каких ситуаций оно лучше всего подходит?
CSS-свойство display: table и другие, делают вывод группы элементов подобно таблице <table> в HTML. Отличие CSS-таблиц от HTML-таблиц: они могут перестать быть таблицами, стоит только изменить их CSS-свойства, а HTML-таблицы на такое не способны. Применение `display: table` хорошо для семантической вёрстки и позволяет избавиться от лишних тегов <table>, <tr>, <td> и т.д. – это просто элементы с предопределёнными значениями display:. Что дает широкие возможности выборочного использования в вёрстке нужных табличных особенностей, применимо скорее к отдельным элементам макета. 
 
3. Какие есть оси во флекс-верстке и как задается их направление?
Во flex-верстке есть две оси - основная и поперечная.
Главная ось определяется свойством flex-direction, которая может принимать одно из следующих значений:
- row - обычный ряд (англ. row, «ряд»), элементы следуют в потоке, слева направо. Это значение по умолчанию, его можно и не прописывать.
- row-reverse - ряд в обратном порядке (англ. reverse, «обратный ход»).
- column - колонка (англ. column, «столбец») в обычном порядке. Очень пригождается при адаптации под мобильные устройства.
- column-reverse - колонка в обратном порядке.

За расположение элементов внутри контейнера вдоль поперечной оси отвечает свойство align-items, которая определяется одним из значений:
- stretch (по умолчанию)- элементы растянуты от одного края контейнера до другого.
- flex-start - по началу flex-контейнера — когда направление контейнера row или row-reverse, все элементы прижаты к верхнему краю контейнера, а при значениях column или column-reverse — к левому.
- flex-end - по концу flex-контейнера — когда направление контейнера row или row-reverse, все элементы прижаты к нижнему краю контейнера, а при значениях column или column-reverse — к правому.
- center - центральная ось контейнера делит каждый элемент пополам.
- baseline - базовые линии всех flex-элементов становятся продолжением базовой линии первого по порядку

4. Разберитесь, как работает свойство `margin: auto` во флекс-верстке, приведите пример использования/
Если во флекс-контейнере ещё осталось свободное пространство, то свойство margin со значением auto у флекс-элементов задаст автоматические отступы. 
Во флексбоксе автоматические отступы работают намного лучше, чем в обычной блочной модели. Во-первых, они работают во всех направлениях (в обычной блочной модели они работают только в горизонтальном направлении). Во-вторых, они умеют взаимодействовать друг с другом: если на одной оси есть несколько автоматических отступов (у разных элементов или с разных сторон одного элемента), то эти отступы поровну разделяют между собой свободное пространство.
В результате имеем идеальное центрирование, что можно применить, например, для выравнивания элементов навигации в рамках родительского контейнера.

5. В чем преимущества `box-sizing`?
box-sizing со значением content-box по умолчанию - задавая границы или внутренний отступ, размер блока увеличивается. Добавляется толщина границы, а внутренние отступы «раздувают» блок, чтобы создать пространство вокруг контента.
Если изменить значение на border-box в нашем примере, то границы будут отрисованы внутри блока, а внутренние отступы не повлияют на его размеры.
Преимущества box-sizing:
1. Можно использовать точечно. Используется стандартная блочная модель, а box-sizing включается для отдельных элементов.
2. Задавая значение inherit по умолчанию - box-sizing включается для всех элементов с возможностью задавать исключения.
Единственный недостаток свойства box-sizing в том, что как часть спецификации CSS3 оно не поддерживается во всех браузерах, особенно не хватает поддержки в старых версиях.

6. Чем отличается `flex-grow` от `flex-shrink`?
Свойство `flex-grow` управляет увеличением (расширением) элементов, если во flex-контейнере есть дополнительное место. В качестве значения свойство flex-grow принимает положительное число, которое указывает, во сколько раз элемент будет увеличиваться относительно других элементов при увеличении размеров flex-контейнера. По умолчанию свойство flex-grow равно 0
Свойство `flex-shrink` управляет усечением элемента относительно других элементов, если flex-контейнер имеет недостаточно места для размещения элемента. В качестве значения свойство принимает число. По умолчанию его значение 1.

7. Как можно добиться следующего позиционирования элементов: 
в стилях нужно прописать свойства:
display: flex;
justify-content: space-between;

8. Какой в итоге будет размер у элемента (можно округлить)?
Box-sizing в стилях не указан, значит значение по умолчанию content-box, тогда размеры 148,5 х 19,7

9. Самостоятельно разберись, зачем нужно свойство `order`?
При помощи свойства order можно менять порядок отображения flex-элементов внутри flex-контейнера.
В качестве значения order может принимать любое число (отрицательное и положительное), которое укажет номер расположения элемента по главной оси. Элементы встают по возрастающей.
При равных значениях order элементы выводятся в том порядке, в каком они появляются в исходном коде.
Если свойство `order` указано не у всех элементов, то элементы без этого свойства будут выведены в месте, согласно своему расположению внутри документа. Причем первыми всегда будут выведены те элементы, у которых свойство `order` отсутствует.
Поскольку order предназначен только для воздействия на визуальный порядок элементов, а не на их логический порядок или порядок вкладок, order не должен использоваться для невизуальных медиа, таких как речь, также Скринридеры по-прежнему будут читать элементы по порядку расположения в разметке.

10. Каким кодом можно сделать такую таблицу? 
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <table border="1">
        <tr>
            <td>Column 1</td>
            <td>Column 2</td>
            <td>Column 3</td>
        </tr>
        <tr>
            <td rowspan="2">Row 1 Cell 1</td>
            <td>Row 1 Cell 2</td>
            <td>Row 1 Cell 3</td>
        </tr>
        <tr>
            <td>Row 2 Cell 2</td>
            <td>Row 2 Cell 3</td>
        </tr>
        <tr>
            <td colspan="3">Row 3 Cell 1</td>
        </tr>
    </table>
</body>
</html>   

11. Как рассчитывается размер flex-контейнера?
Свойство `flex-basis` задает базовый размер флекс-элемента по основной оси перед распределением свободного пространства. Это ширина, если flex-элементы отображаются в ряд, и высота — если в колонку.
Свойство задает ширину элемента в px, mm, pt или в процентах. При этом размер вычисляется относительно родителя. Отрицательное значение недопустимо.
Если выставить значение на 0, то дополнительное место вокруг контента не будет учтено. 
Если выставить на auto, то дополнительное свободное место будет распространяться, основываясь на его flex-grow значении. Значение auto указывает автоматический размер, основанный на содержимом элемента.
В случае, если для элемента одновременно заданы flex-basis (отличное от auto) и width (или height в случае flex-direction: column), flex-basis имеет приоритет.





